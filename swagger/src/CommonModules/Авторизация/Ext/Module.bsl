
Процедура ЛогинЛогаут(Запрос, Ответ) Экспорт
	
	Действие = Запрос.ПараметрыURL["Действие"];
	
	Если Действие = "login" Тогда
		
		ПараметрыЗапроса = Ответы.ПолучитьПараметры(Запрос.ПолучитьТелоКакСтроку());
		
		Логин = РаскодироватьСтроку(ПараметрыЗапроса["login"], СпособКодированияСтроки.КодировкаURL);
		Логин = СокрЛП(СтрЗаменить(Логин, "+", " "));
		Пароль = ПараметрыЗапроса["password"];
		Запоминать = ПараметрыЗапроса.Свойство("remember__checkbox") И ПараметрыЗапроса["remember__checkbox"] = "on";  
		
		//Если НЕ(ЗначениеЗаполнено(Логин) И ЗначениеЗаполнено(Пароль)) Тогда 
		//	Возврат;
		//КонецЕсли;
		
		Если НЕ(ЗначениеЗаполнено(Логин)) Тогда 
			Возврат;
		КонецЕсли;
		
		ДанныеАвторизации = АвторизоватьсяБазе(Логин, Пароль);
		
		Если ДанныеАвторизации.Успех Тогда
			//дополнительная проверка на отключенную учетку
			ДанныеАвторизации.Вставить("Сессия", Неопределено);
			ДанныеПользователя = ОбщегоНазначенияСайтПовтИсп.ПолучитьДанныеПользователя(ДанныеАвторизации);
			Если ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДанныеПользователя.ОбъектАвторизации, "Отключен") = Истина Тогда
				П = Новый Структура; 
				П.Вставить("ОшибкаАвторизации", "Ваш аккаунт отключен! Обратитесь к вашему менеджеру.");
				Ответы.ПолучитьОтвет(ПредопределенноеЗначение("Перечисление.ВидыСтраниц.СтраницаАвторизации"), Ответ, П);
			Иначе
				Попытка Браузер = Запрос.Заголовки.Получить("User-Agent"); Исключение Браузер = ""; КонецПопытки; 
				Попытка IPАдрес = Запрос.Заголовки.Получить("Client-IP"); Исключение IPАдрес = ""; КонецПопытки; 
				
				НоваяСессия = СоздатьСессию(ДанныеАвторизации.Пользователь, Запоминать, Браузер, IPАдрес);
				
				УправлениеКуки.CoockieВОтвет(Ответ, "hash_login", НоваяСессия.id, НоваяСессия.Истекает, "/");
				
				ИнфоОПользователе = Новый Структура;
				ИнфоОПользователе.Вставить("Пользователь", ДанныеАвторизации.Пользователь);
				ИнфоОПользователе.Вставить("Сессия", НоваяСессия.id);
				
				Авторизация.ЗаписатьАктивность(Запрос, ДанныеАвторизации.Пользователь, "Авторизация");
			КонецЕсли;
		Иначе
			П = Новый Структура; 
			П.Вставить("ОшибкаАвторизации", ДанныеАвторизации.ТекстОшибки);
			Ответы.ПолучитьОтвет(ПредопределенноеЗначение("Перечисление.ВидыСтраниц.СтраницаАвторизации"), Ответ, П);
		КонецЕсли;
		
	ИначеЕсли Действие = "logout" Тогда
		Куки = УправлениеКуки.ПолучитьCoockie(Запрос);
		hash_login = Куки["hash_login"];
		ДеактивироватьСессию(hash_login);
		
		Ответы.ПолучитьОтвет(ПредопределенноеЗначение("Перечисление.ВидыСтраниц.СтраницаАвторизации"), Ответ, Неопределено);
	КонецЕсли;
	
		
КонецПроцедуры

Функция СоздатьСессию(Пользователь, Запомнинать, Браузер, IPАдрес) Экспорт 
	Результат = Новый Структура;
	
	Сессия = Строка(Новый УникальныйИдентификатор());
	МЗ = РегистрыСведений.Сессии.СоздатьМенеджерЗаписи();
	МЗ.id = Сессия;
	МЗ.Пользователь = Пользователь;
	
	СрокДействия = ТекущаяДата() + 86400 * ?(Запомнинать, 30, 15);
	МЗ.Истекает = СрокДействия;
	МЗ.ДатаУстановки = ТекущаяДата();
	МЗ.Браузер = Браузер; 
	МЗ.IPАдрес = IPАдрес; 
	МЗ.Записать();
	
	Результат.Вставить("id", Сессия);
	Результат.Вставить("Истекает", СрокДействия);
	
	Возврат Результат;
КонецФункции

Процедура ДеактивироватьСессию(hash_login) Экспорт 
	Если ЗначениеЗаполнено(hash_login) Тогда
		МЗ = РегистрыСведений.Сессии.СоздатьМенеджерЗаписи();
		МЗ.id = hash_login;
		МЗ.Прочитать();
		Если МЗ.Выбран() Тогда
			МЗ.Неактивная = Истина;
			Мз.Записать();
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

Функция СессияАктивна(Запрос, Операция)Экспорт
	Результат = Новый Структура("Успех, Пользователь, Сессия", Ложь, "", "");
	
	Куки = УправлениеКуки.ПолучитьCoockie(Запрос); 
	hash_login = Куки.Получить("hash_login");
	Если ЗначениеЗаполнено(hash_login) Тогда
		ЗапросКБазе = Новый Запрос;
		ЗапросКБазе.Текст = 
		"ВЫБРАТЬ
		|	Сессии.Пользователь КАК Пользователь,
		|	Сессии.id КАК Сессия
		|ИЗ
		|	РегистрСведений.Сессии КАК Сессии
		|ГДЕ
		|	Сессии.id = &id
		|	И Сессии.Истекает >= &ТекущаяДата
		|	И Сессии.Неактивная = ЛОЖЬ";
		ЗапросКБазе.УстановитьПараметр("id", hash_login);
		ЗапросКБазе.УстановитьПараметр("ТекущаяДата", УниверсальноеВремя(ТекущаяДата()));
		Выборка = ЗапросКБазе.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			Результат.Вставить("Успех", Истина);
			Результат.Вставить("Пользователь", Выборка.Пользователь);
			Результат.Вставить("Сессия", Выборка.Сессия);
			
			Если Не ПустаяСтрока(Операция) Тогда
				Авторизация.ЗаписатьАктивность(Запрос, Выборка.Пользователь, Операция);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции


Функция АвторизоватьсяБазе(Логин, Пароль)
	Результат = Новый Структура("Успех, Пользователь, ТекстОшибки", Ложь, "", "");
	
	Пользователь = Неопределено;
	//
	//Если ЗначениеЗаполнено(Пользователь) Тогда
		Если Пользователи.ПользовательИБЗанят(Логин, Пользователь) Тогда
			Свойства = Неопределено;
			Свойства = Пользователи.СвойстваПользователяИБ(Пользователь.УникальныйИдентификатор);
			ХешПароля = Обработки.Хеширование.Создать()._SHA1_BASE64(Пароль);
			СохраняемоеЗначениеПароля = Свойства.СохраняемоеЗначениеПароля;
			Если СтрНайти(СохраняемоеЗначениеПароля, ХешПароля) > 0 Тогда
				//надо прописать авторизацию по паролю
				Результат.Вставить("Успех", Истина);
				Результат.Вставить("Пользователь", НайтиПользователяВСправочникеПоИдентификатору(Пользователь.УникальныйИдентификатор));
			Иначе
				Результат.Вставить("ТекстОшибки", "Не правильно введен пароль");
			КонецЕсли;
		Иначе
			Результат.Вставить("ТекстОшибки", "Не найден пользователь ИБ");
		КонецЕсли;
	//Иначе
	//	Если ПроверитьПользователяДомена(Логин, Пароль) Тогда
	//		ИмяПользователя = Логин;
	//		Если СтрНайти(ИмяПользователя, "@") > 0 Тогда
	//			ИмяПользователя = Лев(ИмяПользователя, СтрНайти(ИмяПользователя, "@") - 1);
	//		КонецЕсли;
	//		Для каждого ПользовательИБ Из ПользователиИнформационнойБазы.ПолучитьПользователей() Цикл
	//			Если Врег(ПользовательИБ.ПользовательОС) = Врег(ИмяПользователя) Или СтрНайти(Врег(ПользовательИБ.ПользовательОС), Врег(ИмяПользователя)) Тогда
	//				Пользователь = Справочники.Пользователи.НайтиПоРеквизиту("ИдентификаторПользователяИБ", ПользовательИБ.УникальныйИдентификатор);
	//				Если ЗначениеЗаполнено(Пользователь) Тогда
	//					Результат.Вставить("Успех", Истина);
	//					Результат.Вставить("Пользователь", Пользователь);
	//				Иначе
	//					Результат.Вставить("ТекстОшибки", "Не правильно введен пользователь");
	//				КонецЕсли;
	//				
	//				Прервать;
	//			Иначе
	//				Результат.Вставить("ТекстОшибки", "Не правильно введен пользователь");
	//			КонецЕсли;
	//		КонецЦикла;
	//	Иначе
	//		Результат.Вставить("ТекстОшибки", "Не правильно введен пользователь");
	//	КонецЕсли;
	//КонецЕсли;
	
	Возврат Результат;
КонецФункции

Процедура ЗаписатьАктивность(Запрос, Пользователь, Операция) Экспорт
	Куки = УправлениеКуки.ПолучитьCoockie(Запрос); 
	hash_login = Куки["hash_login"];
	
	МЗ = РегистрыСведений.АктивностьПользователейHTTP.СоздатьМенеджерЗаписи();
	МЗ.id = hash_login;
	МЗ.ДатаАктивности = ТекущаяДата();
	МЗ.Пользователь = Пользователь;
	МЗ.Операция = Операция;
	
	Попытка МЗ.Браузер = Запрос.Заголовки.Получить("User-Agent"); Исключение КонецПопытки;
	Попытка МЗ.IPАдрес = Запрос.Заголовки.Получить("Client-IP"); Исключение КонецПопытки;
	
	МЗ.Записать();
	
КонецПроцедуры

Функция ПроверитьПользователяДомена(ИмяПользователя, Пароль)
	
	dso = ПолучитьCOMОбъект("LDAP:");
	
	Попытка
		obj = dso.OpenDSObject("LDAP://" + Константы.Домен.Получить(), ИмяПользователя, Пароль, 1);
		
		Возврат Истина;
		
	Исключение
		Описание = ОписаниеОшибки();
		
		Если Найти(Описание, "имя пользователя или пароль не опознаны.") > 0 Тогда
			Сообщить("Неверный пароль");
			
		Иначе
			Сообщить(Описание);
			
		КонецЕсли;
		
		Возврат Ложь;
		
	КонецПопытки;
	
КонецФункции 

Функция СоздатьТокенДляВхода(ОбъектАвторизации) Экспорт 
	Результат = Неопределено;
	
	МЗ = РегистрыСведений.ТокеныДляВхода.СоздатьМенеджерЗаписи();
	МЗ.Токен = Строка(Новый УникальныйИдентификатор());
	МЗ.ДатаВыдачи = ТекущаяДата();
	МЗ.СрокДействия = ТекущаяДата() + 3600;
	МЗ.ОбъектАвторизации = ОбъектАвторизации;
	МЗ.Пользователь = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ОбъектАвторизации, "Пользователь", Истина);
	МЗ.Ответственный = ПараметрыСеанса.ТекущийПользователь;
	МЗ.АдресДляВхода = ОбщегоНазначенияСайтПовтИсп.ПолныйАдресПубликации() + "/index/token?id=" + МЗ.Токен ;
	
	Попытка
		МЗ.Записать();
		Результат = МЗ.Токен;
	Исключение
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Ошибка создания токена для входа - " + ОписаниеОшибки());
	КонецПопытки;
	
	Возврат Результат;
КонецФункции

Функция ПолучитьОписаниеТокена(Токен) Экспорт 
	Результат = Новый Структура("Токен, ДатаВыдачы, СрокДействия, ОбъектАвторизации, Пользователь, Использован, ПользовательОтключен");
	
	МЗ = РегистрыСведений.ТокеныДляВхода.СоздатьМенеджерЗаписи();
	Мз.Токен = Токен;
	МЗ.Прочитать();
	Если Мз.Выбран() Тогда
		ЗаполнитьЗначенияСвойств(Результат, МЗ);
		
		Результат.Вставить("ПользовательОтключен", ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Результат.ОбъектАвторизации, "Отключен"));
	КонецЕсли;
	
	Возврат Результат;
КонецФункции

Процедура ДеактивироватьТокен(Токен, Сессия) Экспорт 
	МЗ = РегистрыСведений.ТокеныДляВхода.СоздатьМенеджерЗаписи();
	Мз.Токен = Токен;
	МЗ.Прочитать();
	Если Мз.Выбран() Тогда
		МЗ.Сессия = Сессия;
		МЗ.Использован = Истина;
		
		МЗ.Записать();
	КонецЕсли;
КонецПроцедуры

Функция НайтиПользователяВСправочникеПоИдентификатору(ИдентификаторПользователяИБ)  
	Результат = Неопределено;
	ТекущийПользовательИБ = ПользователиИнформационнойБазы.ТекущийПользователь();
	
	Запрос = Новый Запрос;
	Запрос.Параметры.Вставить("ИдентификаторПользователяИБ", ИдентификаторПользователяИБ);
	
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ВнешниеПользователи.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.ВнешниеПользователи КАК ВнешниеПользователи
	|ГДЕ
	|	ВнешниеПользователи.ИдентификаторПользователяИБ = &ИдентификаторПользователяИБ";
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		
		Если Не ВнешниеПользователи.ИспользоватьВнешнихПользователей() Тогда
			Возврат НСтр("ru = 'Внешние пользователи отключены.'");
		КонецЕсли;
		
		Результат = Выборка.Ссылка;
		
		Возврат Результат;
	КонецЕсли;

	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	Пользователи.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.Пользователи КАК Пользователи
	|ГДЕ
	|	Пользователи.ИдентификаторПользователяИБ = &ИдентификаторПользователяИБ";
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		Результат = Выборка.Ссылка;
		Возврат Результат;
	КонецЕсли;
	
	Возврат Результат;
КонецФункции